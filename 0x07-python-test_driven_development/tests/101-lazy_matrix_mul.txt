=================================
How to Use 101-lazy_matrix_mul.py
=================================

THIS IS A MODULE THAT PERFORMS MATRIX MULTIPLICATION USING A FUNCTION
``lazy_matrix_mul(m_a, m_b)``.

Usage
=====

``lazy_matrix_mul(...)`` RETURNS A NEW MATRIX WITH THE RESULT OF THE MULTIPLICATION OF
of ``m_a`` by ``m_b``.

::

    >>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul
    >>> m_a = [
    ... [1, 2],
    ... [3, 4],
    ... ]
    >>> m_b = m_a
    >>> print(lazy_matrix_mul(m_a, m_b))
    [[ 7 10]
     [15 22]]

::

    >>> m_a = [[1, 2]]
    >>> m_b = [
    ... [3, 4],
    ... [5, 6]
    ... ]
    >>> print(lazy_matrix_mul(m_a, m_b))
    [[13 16]]

THIS FUNCTION ALSO WORKS WITH FLOATS.

::

    >>> m_a = [
    ... [1.2, 5.5, 6.2],
    ... [4.66, 12.3, -9.2]
    ... ]
    >>> m_b = [
    ... [5.0, 3.3],
    ... [-2.9, 4.4],
    ... [7.2, 4.4]
    ... ]
    >>> print(lazy_matrix_mul(m_a, m_b))
    [[ 34.69   55.44 ]
     [-78.61   29.018]]

A TypeError is raised, IF AT LEAST TWO ARGUMENTS AREN'T PROVIDED.

::

    >>> print(lazy_matrix_mul(m_a))
    Traceback (most recent call last):
    TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

::

    >>> print(lazy_matrix_mul()) # doctest: +NORMALIZE_WHITESPACE
    Traceback (most recent call last):
    TypeError: lazy_matrix_mul() missing 2 required positional arguments:
    'm_a' and 'm_b'

ValueErrors
===========

A ValueError is raised, IF THEY CAN'T BE MULTIPLIED(IF THE COUNT OF ROW m_a != THE COUNT OF COLUMN OF m_b )

::

    >>> m_a = [
    ... [1, 2],
    ... [3, 4],
    ... ]
    >>> m_b = [
    ... [1, 2],
    ... [2, 3],
    ... [4, 5]
    ... ]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ValueError: shapes (2,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)


A ValueError is raised IF THE PARAMETERS ``m_a`` and ``m_b`` ARE empty.

::

    >>> print(lazy_matrix_mul([[]], [[1, 5], [9, 7]]))
    Traceback (most recent call last):
    ValueError: shapes (1,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0)

::

    >>> print(lazy_matrix_mul([[2, 3],[9, 4]], [[]]))
    Traceback (most recent call last):
    ValueError: shapes (2,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)

Invalid Matrices
================

A TypeError is raised, IF ONE OF THE PARAMETERS ISN'T A list.

::

    >>> print(lazy_matrix_mul("NON-LIST", [[4, 9]]))
    Traceback (most recent call last):
    ValueError: Scalar operands are not allowed, use '*' instead

::

    >>> print(lazy_matrix_mul([[1, 2]], "ALSO NON-LIST"))
    Traceback (most recent call last):
    ValueError: Scalar operands are not allowed, use '*' instead

::

    >>> print(lazy_matrix_mul("ANYTHING OTHER THAN A LIST", "NON-LIST"))
    Traceback (most recent call last):
    ValueError: Scalar operands are not allowed, use '*' instead

A TypeError is raised, IF ONE OF THE PARAMETERS IS "None".

::

    >>> print(lazy_matrix_mul(None, None))
    Traceback (most recent call last):
    TypeError: Object arrays are not currently supported

THEY CAN'T BE JUST ANY LIST - they *must* be LIST OF LISTS!,OR ELSE THE BEHAVIOUR is
undefined.

::

    >>> print(lazy_matrix_mul([1, 2], [[5, 6]]))
    Traceback (most recent call last):
    ValueError: shapes (2,) and (1,2) not aligned: 2 (dim 0) != 1 (dim 0)

::

    >>> print(lazy_matrix_mul([[1, 2]], [3, 4]))
    [11]

::

    >>> print(lazy_matrix_mul([1, 2], [3, 4]))
    11

THEY CAN'T BE JUST ANY LIST - THE MUST BE LIST OF LISTS containing
INTEGERS/FLOATS! OR ELSE, a ValueError or TypeError is raised

::

    >>> print(lazy_matrix_mul([[1, "ANYTHING OTHER THAN NUMBER"]], [[3, 4]]))
    Traceback (most recent call last):
    ValueError: shapes (1,2) and (1,2) not aligned: 2 (dim 1) != 1 (dim 0)

::

    >>> print(lazy_matrix_mul([[5, 6], [7, 8]], [[5, "6"], [7, 8]]))
    Traceback (most recent call last):
    TypeError: invalid data type for einsum

::

    >>> print(lazy_matrix_mul([[1, "non-number"]], [[{"a": 1}, 8.8]]))
    Traceback (most recent call last):
    TypeError: Object arrays are not currently supported

Finally, THE LENGTH OF ALL ROWS IN MATRICES ``m_a`` and ``m_b``MUST BE
EQUIVALENT. Otherwise, a ValueError is raised.

::

    >>> m_a = [
    ... [1, 2],
    ... [3, 4, 5]
    ... ]
    >>> m_b = [
    ... [1, 2],
    ... [3, 4]
    ... ]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ValueError: setting an array element with a sequence.

::

    >>> m_a = [
    ... [1, 2],
    ... [3, 4]
    ... ]
    >>> m_b = [
    ... [1, 2],
    ... [3, 4, 5]
    ... ]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ValueError: setting an array element with a sequence.

::

    >>> m_a = [
    ... [1, 2],
    ... [3, 4, 5]
    ... ]
    >>> m_b = m_a
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ValueError: setting an array element with a sequence.
