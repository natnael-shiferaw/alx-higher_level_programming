============================
How to Use 100-matrix_mul.py
============================

THIS MODULE DEFINES A FUNCTION THAT IS USED TO PERFORM A MATRIX MULTIPLICATION.  ``matrix_mul(m_a, m_b)``.

Usage
=====
``matrix_mul(...)`` RETURNS A NEW MATRIX WITH THE RESULT OF THE MULTIPLICATION OF
``m_a`` by ``m_b``.

::

    >>> matrix_mul = __import__('100-matrix_mul').matrix_mul
    >>> m_a = [
    ... [1, 2],
    ... [3, 4],
    ... ]
    >>> m_b = m_a
    >>> print(matrix_mul(m_a, m_b))
    [[7, 10], [15, 22]]

::

    >>> m_a = [[1, 2]]
    >>> m_b = [
    ... [3, 4],
    ... [5, 6]
    ... ]
    >>> print(matrix_mul(m_a, m_b))
    [[13, 16]]

THIS FUNCTION ALSO WORKS WITH FLOATS.

::

    >>> m_a = [
    ... [1.2, 5.5, 6.2],
    ... [4.66, 12.3, -9.2]
    ... ]
    >>> m_b = [
    ... [5.0, 3.3],
    ... [-2.9, 4.4],
    ... [7.2, 4.4]
    ... ]
    >>> print(matrix_mul(m_a, m_b))
    [[34.69, 55.44000000000001], [-78.61, 29.018000000000008]]

THIS FUNCTION CAN ALSO COMBINE FLOATS AND INTEGERS.

::

    >>> m_a = [
    ... [1, 2.2, 3.3, 4],
    ... [5, 6, 7, 8.8],
    ... ]
    >>> m_b = [
    ... [1.1, 2, 3.3],
    ... [4.0, 5.5, 6],
    ... [7, 8, 9],
    ... [10.01, 11, 12.3]
    ... ]
    >>> print(matrix_mul(m_a, m_b))
    [[73.03999999999999, 84.5, 95.4], [166.58800000000002, 195.8, 223.74]]

A TypeError is raised, IF AT LEAST TWO ARGUMENTS AREN'T PROVIDED.

::

    >>> print(matrix_mul()) # doctest: +NORMALIZE_WHITESPACE
    Traceback (most recent call last):
    TypeError: matrix_mul() missing 2 required positional arguments:
    'm_a' and 'm_b'

::

    >>> print(matrix_mul()) # doctest: +NORMALIZE_WHITESPACE
    Traceback (most recent call last):
    TypeError: matrix_mul() missing 2 required positional arguments:
    'm_a' and 'm_b'

ValueErrors
===========

A ValueError is raised, IF THEY CAN'T BE MULTIPLIED(IF THE COUNT OF ROW m_a != THE COUNT OF COLUMN OF m_b )

::

    >>> m_a = [
    ... [1, 2],
    ... [3, 4],
    ... ]
    >>> m_b = [
    ... [1, 2],
    ... [2, 3],
    ... [4, 5]
    ... ]
    >>> print(matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ValueError: m_a and m_b can't be multiplied


A ValueError is raised IF THE PARAMETERS ``m_a`` and ``m_b`` ARE empty.

::

    >>> print(matrix_mul([], [[1, 2]]))
    Traceback (most recent call last):
    ValueError: m_a can't be empty

::

    >>> print(matrix_mul([[1, 2]], [[]]))
    Traceback (most recent call last):
    ValueError: m_b can't be empty

::

    >>> print(matrix_mul([[]], []))
    Traceback (most recent call last):
    ValueError: m_a can't be empty

Invalid Matrices
================

A TypeError is raised, IF ONE OF THE PARAMETERS ISN'T A list.

::

    >>> print(matrix_mul("NON-LIST VALUE", [[9, 8]]))
    Traceback (most recent call last):
    TypeError: m_a must be a list

::

    >>> print(matrix_mul([[6, 5]], "ANYTHING OTHER THAN LIST"))
    Traceback (most recent call last):
    TypeError: m_b must be a list

::

    >>> print(matrix_mul("not a list", "also not a list"))
    Traceback (most recent call last):
    TypeError: m_a must be a list

::

    >>> print(matrix_mul(None, None))
    Traceback (most recent call last):
    TypeError: m_a must be a list

THEY CAN'T BE JUST ANY LIST - they *must* be LIST OF LISTS!

::

    >>> print(matrix_mul([5, 4], [[1, 6]]))
    Traceback (most recent call last):
    TypeError: m_a must be a list of lists

::

    >>> print(matrix_mul([[7,4]], [6, 4]))
    Traceback (most recent call last):
    TypeError: m_b must be a list of lists

::

    >>> print(matrix_mul([5, 4], [4, 9]))
    Traceback (most recent call last):
    TypeError: m_a must be a list of lists

THEY CAN'T BE JUST ANY LIST - THE MUST BE LIST OF LISTS containing
INTEGERS/FLOATS!

::

    >>> print(matrix_mul([[4, "NOT A NUMBER"]], [[6, 7]]))
    Traceback (most recent call last):
    TypeError: m_a should contain only integers or floats

::

    >>> print(matrix_mul([[1, 2]], [[{"a": 1}, 8.8]]))
    Traceback (most recent call last):
    TypeError: m_b should contain only integers or floats

::

    >>> print(matrix_mul([[1, "non-number"]], [[{"a": 1}, 8.8]]))
    Traceback (most recent call last):
    TypeError: m_a should contain only integers or floats

Finally, THE LENGTH OF ALL ROWS IN MATRICES ``m_a`` and ``m_b``MUST BE
EQUIVALENT. Otherwise, a TypeError is raised.

::

    >>> m_a = [
    ... [1, 2],
    ... [3, 4, 5]
    ... ]
    >>> m_b = [
    ... [1, 2],
    ... [3, 4]
    ... ]
    >>> print(matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    TypeError: each row of m_a must should be of the same size

::

    >>> m_a = [
    ... [1, 2],
    ... [3, 4]
    ... ]
    >>> m_b = [
    ... [1, 2],
    ... [3, 4, 5]
    ... ]
    >>> print(matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    TypeError: each row of m_b must should be of the same size

::

    >>> m_a = [
    ... [1, 2],
    ... [3, 4, 5]
    ... ]
    >>> m_b = m_a
    >>> print(matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    TypeError: each row of m_a must should be of the same size
