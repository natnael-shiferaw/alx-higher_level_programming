===========================
How to Use 0-add_integer.py
===========================

THIS IS A MODULE THAT USES A FUNCTION FOR ADDING INTEGERS ``add_integer(a, b=98)``.

Usage
=====

``add_integer(...)``` RETURNS THE RESULT FOR THE ADDITION OF THE TWO ARGUMENTS. FOR NUMBERS,
IT HAS THE SAME RESULT AS USING THE ``+`` operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(1, 3)
    4

::

    >>> add_integer(3, -5)
    -2

THIS FUNCTION also works with FLOATS.

::

    >>> add_integer(1.0, 3.0)
    4

NOTE THAT FLOATS ARE CHANGED/CASTED to INTEGERS before addition.

::

    >>> add_integer(7.9, 0.4)
    7

::

    >>> add_integer(-7.9, -0.4)
    -7

WE CAN COMBINE FLOAT AND NON-FLOAT VALUES.

::

    >>> add_integer(3.4, -5)
    -2

THE SECOND ARGUMENT(b) IS OPTIONAL - by default, it is 98.

::

    >>> add_integer(3)
    101

Non-Numbers
===========

``add_integer()`` A TypeError is raised: IF BOTH THE ARUGMENTS AREN'T INTEGERS OR FLOATS.

::

    >>> add_integer("hello", 5)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(3, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

A TypeError message is only printed for the first argument, IF BOTH OF THEM AREN'T INTEGERS/FLOATS.

::

    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

THE FUNCTION WILL FAIL IF infinity is PROVIDED.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer


::

    >>> add_integer(6, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

And WITH NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(5, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
